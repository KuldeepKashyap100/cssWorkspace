1. Setting height of child 100% refers to available height given by the parent container. But the height of the parent is calculated dynamically by the content it holds 
    so it’s only as big as its content requires it to be. That’s why setting height: 100% has no effect. 
    If we want it have an effect we would need to change height of “main”, “body” and “html” elements.

2. For inline elements, we can’t set height, width margin-top and margin-bottom properties because it might overlap top bottom elements.
    inline The element doesn’t start on a new line and only occupy just the width it requires. You can’t set the width or height.
    inline-block It’s formatted just like the inline element, where it doesn’t start on a new line. BUT, you can set width and height values.
    block The element will start on a new line and occupy the full width available. And you can set width and height values.

3. Setting display: none to an element will take it out of the document flow, it is supposed to be used in conjunction with javascript (like in modal).

4. If we want the mixture of inline and block element(it's same as inline but we can set height and width). 
    We use inline-block it’ll allow height, width margin-top and margin-bottom and padding etc.

5. vertical-align: middle aligns the elements in middle of the parent. display property must be inline or inline-block.
    The text-align CSS property sets the horizontal alignment of the content inside a block element or table-cell box. 
    This means it works like vertical-align but in the horizontal direction.

6. box-shadow property to add shadow. values -> offset-x | offset-y | blur-radius | spread-radius | color

7. The float CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. 
    The element is removed from the normal flow of the page, though still remaining a part of the flow.

8. To apply z-index "position" property needs to be applied on the same element.

9. If z-index is same for two elements then precedence is decided by element order in html file. Element which comes last in html file have higher precedence.

10. Positon absolute takes the element out of the document flow just like fixed but the context is nearest parent which have position property applied. For fixed position context is viewport. 
    If none of the ancestors have position property applied then for absolute position context is HTML element.
11. In relative position element is positioned relative to the current position. Element is not taken out of document flow.

12. Stacking context ->  parent’s z-index matters.

13. background-size has 2 imp properties 
    cover - container takes precedence over image. It will make sure image is fit in the container even if have to resize the image.
    contain - image takes precedence over container. It will make sure entire image is present even if there is extra space left horizontally or vertically.

14. An image(<img>) inside the div does not respect container boundaries. It takes actual height and width of the image.
    also % values does not affect the width, height of the image till it is inside an inline element. you can use inline-block element to use % values.

15. background-image: linear-gradient(red, blue) can add a background where one color transition into another(it strart on edge but radial-gradient starts on some shape).

16. filter: grayscale(100%) can be used to black and white the image. 
    The filter CSS property applies graphical effects like blur or color shift to an element. 
    Filters are commonly used to adjust the rendering of images, backgrounds, and borders.

17. whenever an element has position: fixed and percentage unit, then the containing block is viewport.
18. whenever an element has position: absolute and percentage unit, then the containing block is ancestor(content + padding).
19. whenever an element has position: relative or static and percentage unit, then the containing block is ancestor(content). ancestor is closest block level element.

20. if we change font-size in browser settings and we have used rem then it will adapt.

21. vmin unit is realtive to min(vw, vh) and vmax unit is realtive to max(vw, vh).

22. em, the unit is relative to the font size of its parent element.
    em calculates value based on inheritance. it becomes very complex if any element has many ancestors also using em.

23. margin: 0 auto aligns the element to center horizontally(to only block level elements with width property applied).

24. hardware pixels and css pixels are different. css pixel = hardware pixel / devicePixelRatio.

24. responsive -> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
    name=viewport -> target viewport
    width=device-width -> width of our page = width of the device.
    initial-scale=1.0 -> zoom level that will be applied

25. media query example - @media (min-width: 40rem) and (max-width: 60rem) and (orientation: portrait){}.

26. there are two families: generic families(serif, sans-serif, cursive, monospace) and font families.
27. generic families are kind of headline under which multiple different font( or font family) comes.
    ex- "times new roman"(font-family) and "georgia"(font-family) comes under serif(generic-family).
        "helvetica" and "verdana" comes under sans-serif.

28. if we apply generic-family to an element. it will take the font(font-family) selected in browser setting for that generic-family.
    alternatively we can define a generic-family in our root css code.
29. font-family can take multiple values.

30. @import url("http://font-url.com") to import fonts in .css files.    

31. font-weight can also take numberic value from 100-900.

32. To import a local font that is on our computer:
    @font-face {
        font-family: "My Font Name";
        src: url("assets/myfontname.ttf") format("truetype");
    }
    To use the font, switch back to Design view and enter the name of the font 
    (as you typed it for the font-family line) in the Font name field while formatting text.

33. To change the case font-variant: small-caps to capitalize characters.
34. To increase the space between each letter letter-spacing: 4px;
35. line-height: 1, space between top and bottom of the line. 1 = font-size, 2 = 2 * font-size.
36. text-shadow: 5px 5px blur gray, to add shadow to text.
37. font-display fallack font is applied until the actual font is downloaded.

38. display: inline-flex then the flex container takes the width required by its elements and 
    does not change its width on window resize(so basically it behaves like inline element)
    and the height is equal to height of max height element.
    display: flex (block level behavior)

39. on applying (display: flex) two other properties automatically applied (flex-direction: row and flex-wrap: no-wrap).
40. flex-wrap possible values no-wrap, wrap, wrap-reverse.

41. flex-direction: row (starting point top-left corner)
    main-axis = x-axis (left to right)
    cross-axis = y-axis (top to bottom)

41. flex-direction: row-reverse (starting point top-right corner)
    main-axis = x-axis (right to left)
    cross-axis = y-axis (top to bottom)

41. flex-direction: column (starting point top-left corner)
    main-axis = y-axis (top to bottom)
    cross-axis = x-axis (left to right)

41. flex-direction: column-reverse (starting point bottom-left corner)
    main-axis = y-axis (bottom to top)
    cross-axis = x-axis (left to right)
note - items aligns along with main-axis and wraps around cross-axis.

42. shorthand for flex-direction and flex-wrap -> flex-flow: row wrap.

43. align-items: stretch (default value), center, flex-start, flex-end 
    (to align items along cross axis).

44. justify-content: stretch (default value), center, flex-start, flex-end, space-between, space-around 
    (to align items along main axis).

45. align-content: flex-start (allows us to align content along cross axis when content occupies more than one line)

46. Flexbox and the Z-Index: an element only has an effect, if the position  property with a value different from static was applied
    One exception from this behaviour is flexbox: Applying the z-index to flex-items (so the elements inside of the flex-container) 
    will change the order of these items even if no position property was applied.

Flex-items

47. order: - 1 (allows us to change the order of elements that elements initially have based on the code in html. 
    bigger the number later the element will be positioned) 
    (default value 0, -ve value moves elements left and +ve value moves elements right)
    note - row-reverse will the reverse the current order

48. align-self: flex-start (allows us to position single element along cross axis)
    note - difference in contrast to align-items is that align-items refers to all elements.

49. flex-grow: 0 (default value) (allows us to divide extra width space between elements based on some ratio)
    ex- one item has (flex-grow: 1) and other item has (flex-grow: 4) then extra width is divided by 5 and 
    one part will go to first element and 4 parts will go to second element.

50. flex-shrink: 1 (default value) (specifies how the item will shrink 
    relative to the rest of the flex items inside the same container.
    If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink).
    note - flex-shrink: 0 will disable the shrink

51. flex-basis: auto (default value) (allows us to set width and height of flex item depending upon the direction of main-axis).
    if flex-direction: row then flex-basis will refer to width of flex item.
    if flex-direction: column then flex-basis will refer to the height of flex item.
    actual width and height will act as fallback when flex-basis: auto.
    possible values - px, %, rem , em

52. shorthand for all the above properties - flex: 0(flex-grow) 1(flex-shrink) auto(flex-basis).

css-grid container

53. display: grid to convert container into grid.
54. grid-template-columns: 200px 2fr 20% 1fr; (fr -> fraction)
    this will create 4 columns of different widths.
    column 2 will receive twice as width as column 4.
    column 2 and column 4 will take width (100% - 200px) in 2:1.

55. grid-template-columns: 200px 5rem 20% auto; 
    auto value will make 4th column to occupy the remaining available width
    same is the case with grid-template-row and height.

56. grid-template-rows: 5rem 2.5rem; 
    this will create 2 rows of different heights.

57. grid-template-rows: [row-1-start] 5rem [row-1-end row-2-start] 2rem; 
    we can assign single or multiple names to lines of grid.
    now in cells we can specify row names instead of numbers. ex- grid-row-start: row-1-start.

58. gap(gutter) between the lines.
    grid-column-gap: 20px;
    grid-row-gap: 20px;

59. we can define areas in grid container, and tell cells to occupy these areas-
    grid-template-areas: "header header header header"
                        "side . main main"
                        "footer footer footer footer";
    now cells can use grid-area: header;

60. repeat css function takes 2 arguments times and pattern it should repeat.
    ex- grid-template-columns: 25% 25% 25% 25%; will create 4 columns of equal width.
        grid-template-columns: repeat(4, 25%)

61. minmax function takes 2 arguments, first argument tell us the minimum height or width an element should occupy
    second argument tell us the maximum height or width an element should occupy.

62. How to specify grid area when using repeat function?
    ex - grid-template-columns: repeat(4, [col-start] 25% [col-end]);
    now in grid cell -  grid-column: col-start 2 / col-end 2;

63. git-template-rows: 3.5rem auto fit-content(8rem);
    fit-content takes an argument which is a default size 
    which will be used in case content is smaller or require less space is needed
    but If the content require more space than that it will get this size though.
    We should use it when we want some row to have some minimum size but also not be bigger than its content.

64. justify-items: center (or start, end);
    this property is used to position items along the rows(x-axis).
    it positions the elements in their grid tracks(cells it occupies).
    default value is stretch.
    
65. align-items: center;
    this property is used to position items along the columns(y-axis).

66. if the grid size is greater than the elements contained in it we can also collectively position the entire grid.
    justify-content: center;(positioning along x-axis)
    align-content: center;(positioning along y-axis)
    ex- grid height and width is 1000px but all the rows and columns are occupying only 800px now
        we can position the enrire grid.
    
67. grid-auto-rows: 8rem;
    grid-auto-columns: 8rem;
    allows to define the size of dynamically newly added rows (i.e when we have not specified the number of rows).

68. grid-auto-flow: column;
    by default direct childs of parent grid container will be added to new row
    we can also make new content to be added on columns using this property.

69. grid-template-columns: repeat(auto-fill, 10rem);
    based on the width of the grid new columns are automatically added
    grid-template-columns: repeat(auto-fit, 10rem);
    when we don't have enough items in the row and it will try to fit the all the available items in the center.

grid cell

70. grid-column-start: 3; (start the cell from line no. 3, horizontally)
    grid-column-end: 5; (end the cell on line no. 5, horizontally)
    grid-row-start: 1; (start the cell from line no. 1, vertically)
    grid-row-end: 3; (end the cell from line no. 3, vertically)

71. grid-column-end: span 2; takes next two cells as width.

72. shorthand grid-column: 1 / 2;
              grid-row: 2 / 4;
              grid-area: row-start/column-start / row-end/column-end;

73. justify-self: center (align single cell elements along x-axis)
    align-self: center (align single cell elements along y-axis)


74. flexbox is one dimensional and grid is two dimensional.
    grid is a great choice if we have a real layout with multiple dimensions.
    ex - form label and input side by side


2d-transformations

75. moving the element we can also do using top, right, etc properties.
    we can also move an element using margin.
    but moving an element using transform property is hardware accelerated and it keeps the element in the document flow.

76. transform: rotateZ(45deg)
    rotates the element along z-axis and it rotates around the center of the element.
    we can change from center using 
    transform-origin: center(default value) or left top or 0 0(same as top left) or 1rem 1rem(from the top left corner) or 50% 50%(center).

78. transform: translateX(1rem) (move an element on the x-axis).
    if position property on an element is static then we cannot use top, right, etc properties to move an element.
    we can use margin though but its kind of hacky way.

79. transform: rotateZ(45deg) translateX(1rem);
    rotate will the direction of x-axis of an element and now the element will move diagonally.

80. transform: skewX(20deg) (skewed to the left)
    skewX has the same effect as someone pulled our corners to the left.
    transform: skewX(20deg)
    skewY has the same effect as someone pulled our corners up so the top left corner pulled up a bit.

81. transform: scaleX(2) (twice the normal size)
    allows you to increase the width
    transform: scaleY(2)
    allows you to increase the height

3d-transformations

82. to visualize the axis with element watch video-6 of transform
    z-axis goes through from front to back of the element and the element can spin around this axis.

83. transform: perspective(100px) rotateY(80deg);
    The perspective() CSS function defines a transformation that sets the distance between the user and the z=0 plane, 
    the perspective from which the viewer would be if the 2-dimensional interface were 3-dimensional.
    current style is same as "perspective: 100px" on parent container if we want to add perspective to all child elements

84. perspective-origin: center(default value) or right or left;
    to change the angle of perspective

85. transform: translate(-100rem)
    will move then element backward in 3d plane.
    apply position: relative to parent container and position: absolute to child elements to form a cube

86. transform-style: flat(default value) or preserve-3d;
    when we rotate any container element by 90deg in x or y then all its children will also hide
    even though they might have some rotation of their own. to avoid this behavior we use  preserve-3d;
    definition - The transform-style CSS property sets whether children of an element are positioned in the 3D space 
                or are flattened in the plane of the element.

87. backface-visibility: hidden or visible;
    if you want to hide the back of an element while it's flipping

css transitions

88. transitions are built-in animations. 
    transitions are added by adding property transition and which other property like opacity or position
    of an element should be watched and should be animated if it changes.
    only few properties can be watched.
    definition - CSS transitions provide a way to control animation speed when changing CSS properties. 
    Instead of having property changes take effect immediately, 
    you can cause the changes in a property to take place over a period of time. 
    For example, if you change the color of an element from white to black, usually the change is instantaneous. 
    With CSS transitions enabled, changes occur at time intervals that follow an acceleration curve, 
    all of which can be customized.

89. CSS transitions let you decide which properties to animate (by listing them explicitly), 
    when the animation will start (by setting a delay), how long the transition will last (by setting a duration), 
    and how the transition will run 

90. transition: <property> <duration> <timing-function> <delay>;
    transition: opacity 200ms ease-out 1s, transform 500ms ease-out 1s
    -> first argument is which property you want to watch. with value "all" the transition will be played 
        whenever any transitionable property changes.
    -> second argument is duration over which you want to play an animation when one the watched properties changes.
    -> third argument is a timing function which allows you how fast it should go through that duration
        ease-out - start fast and end slow.
        ease-in - start slower and end faster
    -> fourth argument is delay, animation will wait till delay duration is completed.

90. transition-timing-function: linear;
    The transition-timing-function CSS property sets how intermediate values 
    are calculated for CSS properties being affected by a transition effect.
    cheatsheet - https://easings.net/

91. transition does not work on display property, so to show animation in backdrop of modal
    we have to use js to change value from none to block and then use some class like open and close
    which changes some watchable property like opacity.

css animations

92. CSS animations make it possible to animate transitions from one CSS style configuration to another. 
    Animations consist of two components, a style describing the CSS animation and 
    a set of keyframes that indicate the start and end states of the animation’s style, 
    as well as possible intermediate waypoints.

93. There are three key advantages to CSS animations over traditional script-driven animation techniques:
    -> They’re easy to use for simple animations; you can create them without even having to know JavaScript.
    -> The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript. 
        The rendering engine can use frame-skipping and other techniques to keep the performance as smooth as possible.
    -> Letting the browser control the animation sequence lets the browser optimize performance and efficiency by, 
        for example, reducing the update frequency of animations running in tabs that aren't currently visible.
    
94. To create a CSS animation sequence, you style the element you want to animate with the animation property.
    This lets you configure the timing, duration, and other details of how the animation sequence should progress. 
    This does not configure the actual appearance of the animation, which is done using the @keyframes.

95. animation: animatation-name animatation-duration animatation-delay animatation-iteration-count animatation-direction animatation-fill-mode
    ex -
    @keyframes wiggle {
        from {
            transform: rotateZ(0deg);
        }

        to {
            transform: rotateZ(10deg);
        }
    }
    .start-hosting-button {
        animation: wiggle 200ms 3s 8 none;
    }
    
    animatation property
    -> animatation-name -> keyframe name
    -> animatation-duration -> duration of the animation
    -> animatation-delay -> delay
    -> animatation-iteration-count -> animation iterations (how many times it'll play)
    -> animatation-direction -> what should happen after one iteration ? does it snap back to the starting state and start the next iteration? or does it alternate and move back to the starting state?
                normal - The animation is played as normal (forwards). This is default.
                reverse - The animation is played in reverse direction (backwards)
                alternate - The animation is played forwards first, then backwards
                alternate-reverse - The animation is played backwards first, then forwards
    -> animatation-fill-mode -> should the element keep the properties mentioned in "to keyframe" or "from keyframe" or "default value"? 
                    "forwards" keep the final result i.e "to keyframe styles"
                    "backwards" keep the element in initial state after the animation i.e "from keyframe styles".
                    "both" keep initial state at beginning and final state in the end

    ex- /* @keyframes duration | easing-function | delay |
        iteration-count | direction | fill-mode | play-state | name */
        animation: 3s ease-in 1s 2 reverse both paused wiggle;

96. Adding multiple keyframes
    @keyframes wiggle {
        0% {
            transform: rotateZ(0deg);
        }

        50% {
            transform: rotateZ(-10deg);
        }

        100% {
            transform: rotateZ(10deg);
        }
    }
    -> we can add as many inbetween steps as we want

97. We can also listen to animation events using js.
    button.addEventListener("animationstart", () => {});
    button.addEventListener("animationiteration", () => {});
    button.addEventListener("animationend", () => {});

98. css variables.
    :root {
        --my-var: #fa923f;
    }
    .element-3 {
        color: var(--my-var, #fa923f);
    }
    -> defining the variable on root makes it available in the entire document.
    -> second argument in var is fallback value.
    
99. vendor prefixes
    Once a feature reaches recommendation state, it should be implemented in all browsers equally.
    but until then, each browser might not implement it or some of its features or maybe implement
    some features differently than other browsers do, simply to try how it works, how do users
    of that browser use the feature and so on. For this we got vendor prefixes, this is a mechanism
    which allows browser vendors to implement an upcoming feature in an early version without breaking
    the feature when it finally gets released.
    few years ago, to use flex-box, we had to write something like this,
    .container {
        display: -webkit-box; // older version of safari
        display: -ms-flexbox; // IE and edge
        display: -webkit-flex; // newer version of safari
        display: flex; // final value should be at the bottom so that older versions of flexbox don't overwrite the new version
    }

100. why don't they just all use flex?
    Because if the standard then changes or becomes finalized and they therefore all implement the same
    specification, then if they suddenly overwrite the flex value to now work different than it used to be,
    a lot of websites that were early adopters of that technology would get broken.
    Therefore they have their early adopter implementation,
    the prefixed version which they don't change even if the standard changes or becomes final and then
    they implement their final version once that is the case.
    So now they got different implementations and this allows you a developer to use these features ahead of time,
    it also ensures that your webpage won't suddenly break and it also,
    that's another advantage, allows you to safely implement a certain feature which will still work, at least to some extent,

101. autoprefixer is a tool to generate all prefixes.

102. support queries: some features just aren't implemented(yet) in browsers.
    it takes condition which is property value pair if it is supported by the browser.
    so in the end browser checks can i read and use that? if the browser can't then it will not
    execute the code b/w curly braces.
    @supports(display: grid) {
        .container {
            display: grid;
        }
    }
    
103. use kebab case while naming the class, because css is case insensitive.
    kebab case -> .page-title
    snake case -> .pageTitle same as .pagetitle

104. name classes by feature and not by style.
    by feature -> .page-title
    by style -> .title-blue

105. BEM(Block Element Modifier)
    a convention to name classes in uniform and consistent way across project
    and also prevent clashes(bigger your project gets heigher the chances of you reusing the same class name)

106. .BLOCK__ELEMENT--MODIFIER
    ex- .main-menu__item--size-big
        .button__--success

107. PostCSS
    PostCSS is not a preprocessor, but a postprocessor. 
    That means it does not have its own syntax, 
    but instead uses standard CSS and modifies it with plugins. 
    Plugins are JavaScript modules that can add features, 
    fix bugs, optimize code, or create custom transformations. 
    You can choose the plugins you need and configure them in your project, 
    using tools like webpack, gulp, or npm scripts.
    PostCSS can also improve your performance and compatibility, 
    by optimizing your code, adding vendor prefixes, or polyfilling new features.
    choose based on -> complexity and size of your project

108. Sass or Less
    Sass and Less are two popular preprocessors that extend the capabilities of CSS. 
    They allow you to use variables, mixins, functions, nesting, inheritance, 
    and other features that make your code more readable and maintainable.
    They also have their own syntax, which requires you to compile your code 
    into plain CSS before sending it to the browser.


